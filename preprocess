#!/usr/bin/env bash
# preprocess: clean any semicolon-delimited dataset into TSV with Unix line endings,
# decimal point conversion, non-ASCII removal, and new ID generation for blanks.
# Usage: ./preprocess <input_file>

set -euo pipefail

if [[ $# -ne 1 ]]; then
  echo "Usage: $0 <input_file>" >&2
  exit 1
fi

file="$1"
# Ensure file exists
if [[ ! -f "$file" ]]; then
  echo "Error: file '$file' not found" >&2
  exit 1
fi

# Read and clean header
IFS=';' read -r -a headers < <(head -n1 "$file" | tr -d '\r')
num_cols=${#headers[@]}

# Find indices for decimal conversion by matching header names
declare -a dec_idxs
for idx in "${!headers[@]}"; do
  h="${headers[idx]}"
  case "$h" in
    "Rating Average"|"Complexity Average")
      dec_idxs+=("$idx")
      ;;
  esac
done

# Determine max existing numeric ID in first column
max_id=0
while IFS=';' read -r id _; do
  # skip header label
  [[ "$id" == "${headers[0]}" ]] && continue
  # numeric check
  if [[ "$id" =~ ^[0-9]+$ ]]; then
    (( id > max_id )) && max_id=$id
  fi
done < <(tail -n +2 "$file" | tr -d '\r')
next_id=$((max_id + 1))

# Print header as TSV
# Clean header fields: remove CR and non-ASCII
for ((i=0; i<num_cols; i++)); do
  h="${headers[i]}"
  h="${h//$'\r'/}"                # strip CR if any
  headers[i]="$(echo -n "$h" | tr -cd '\0-\177')"
done
# Join and output
printf "%s" "${headers[0]}"
for ((i=1; i<num_cols; i++)); do
  printf "\t%s" "${headers[i]}"
done
printf "\n"

# Process each data row
while IFS=';' read -r -a row; do
  # Replace missing ID
  id="${row[0]:-}"
  if [[ -z "${id//[[:space:]]/}" ]]; then
    row[0]="$next_id"
    ((next_id++))
  fi
  # For each decimal field, convert comma to dot
  for idx in "${dec_idxs[@]}"; do
    val="${row[idx]:-}"
    row[idx]="${val//,/.}"
  done
  # Clean each field: strip CR, remove non-ASCII
  for ((i=0; i<num_cols; i++)); do
    f="${row[i]:-}"
    f="${f//$'\r'/}"                    # strip CR
    row[i]="$(echo -n "$f" | tr -cd '\0-\177')"
  done
  # Print fields as TSV, ignoring extras
  printf "%s" "${row[0]}"
  for ((i=1; i<num_cols; i++)); do
    printf "\t%s" "${row[i]}"
  done
  printf "\n"
done < <(tail -n +2 "$file" | tr -d '\r')
